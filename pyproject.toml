[tool.poetry]
name = "supermechs"
version = "0.1.0"
description = "Package modeling the behavior of the SuperMechs game into python objects."
authors = ["Eneg"]
readme = "README.md"
packages = [{ include = "supermechs", from = "src" }]

[tool.poetry.dependencies]
python = "^3.10"
typing-extensions = "^4.4.1" # override
attrs = ">= 22.1.0"          # min_len
Pillow = "^9.0.0"
rtoml = "*"

[tool.poetry.group.dev.dependencies]
ruff = "^0.0.291" # > .291 replaces black (alpha)
pre-commit = "*"


[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"


[tool.ruff]
select = [
    "E",     # general errors
    "F",
    "RUF",

    "G",     # avoid formatting in logging
    "Q",     # consistent string quotes
    "FLY",   # static joins
    "ISC",   # string concatenation

    "SIM",   # simplifiable logic
    "C4",    # simplifiable comprehensions
    "ASYNC", # blocking calls in async context
    "TCH",   # type-checking-only imports
    "PTH",   # use pathlib for path manipulation
    "PL",    # pylint
    "TRY",   # try - except pitfalls
    "EM",    # don't inline exception messages
    "ERA",   # commented out code
]
ignore = ["TRY003"]
line-length = 100
target-version = "py310"

[tool.ruff.per-file-ignores]
"__init__.py" = ["F403"]
"api.py" = ["F403", "PLC0414"]
"utils.py" = [
    "E721" # we check for types constructible via [] {} ()
]

[tool.ruff.isort]
combine-as-imports = true
split-on-trailing-comma = false
extra-standard-library = ["typing_extensions"]
section-order = ["future", "standard-library", "third-party", "first-party", "local-folder", "supermechs", "supermechs-ext"]

[tool.ruff.isort.sections]
"supermechs" = ["supermechs"]
"supermechs-ext" = ["supermechs.ext"]

[tool.ruff.flake8-type-checking]
exempt-modules = ["typing", "typing_extensions", "supermechs.typeshed"]
runtime-evaluated-decorators = ["attrs.define", "attrs.frozen"]


[tool.pyright]
include = ["src/supermechs"]
pythonVersion = "3.10"

typeCheckingMode = "strict"

reportUnnecessaryTypeIgnoreComment = "information"
reportUnnecessaryCast = true
reportMatchNotExhaustive = "warning"
reportUnusedImport = false # handled by ruff

reportOverlappingOverload = "information"
reportPrivateUsage = false
reportUnnecessaryIsInstance = false
reportImportCycles = false
reportIncompatibleMethodOverride = false
reportIncompatibleVariableOverride = false

reportUnknownMemberType = false
reportUnknownArgumentType = false
reportUnknownVariableType = false
reportMissingTypeStubs = false
